/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';

import { IMyFeaturedContentData } from './my-featured-content.data';
import { IMyFeaturedContentProps } from './my-featured-content.props.autogenerated';
import { ProductDimension, AsyncResult, ProductDimensionValue } from '@msdyn365-commerce/retail-proxy';
import { getDimensionValuesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';

/**
 *
 * MyFeaturedContent component
 * @extends {React.PureComponent<IMyFeaturedContentProps<IMyFeaturedContentData>>}
 */
export default class MyFeaturedContent extends React.PureComponent<IMyFeaturedContentProps<IMyFeaturedContentData>> {
    
    private onButtonClick = (props: IMyFeaturedContentProps<IMyFeaturedContentData>) => {
        return async (event: React.MouseEvent) => {
            try {
                let result: AsyncResult<ProductDimensionValue[]> = await this.getData(props);
                console.log(result);
            } catch (error) {
            }
        };
    }

    private getData = async (props: IMyFeaturedContentProps<IMyFeaturedContentData>) => {
        const { context } = props;
        const recordId = +"68719490634";
        const channelId = context.actionContext.requestContext.apiSettings.channelId;
        const callerContext = context.actionContext;
        const matchingDimensionValues: ProductDimension[] = [];
        const dimensionTypeValue: number = 1;
        return await getDimensionValuesAsync({ callerContext, queryResultSettings: {} }, recordId, channelId, dimensionTypeValue, matchingDimensionValues,
            // @ts-ignore: KitVariantResolution context should be nullable
            null);
    }

    public render(): JSX.Element {
        const {
            config: {
                imageAlignment, imageSrc
            }
        } = this.props;
        return (
            <div className='row'>
                <img src={imageSrc} alt='image' style={{ float : imageAlignment }} />
                <button onClick={this.onButtonClick(this.props)}>Call data action</button>
            </div>
        );
    }
}
